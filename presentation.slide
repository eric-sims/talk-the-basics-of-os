# Practical System Programming with the Golang 'os' Package
23 January 2025
// 04 February 2025

Eric Sims
Software Engineer, Vivint
e.sims@icloud.com

: My goal: Help you learn something new!

## Scripting
- All scripting languages are programming languages
- Usually line-by-line interpreter
  - Interpreter halts during execution

: On the contrary: Compilers analyze and report errors collectively
- Scripts
  - Automate tasks (string together program executions)
  - Extract information across files
- Don't be fooled, a shell is just a program!

: Not compiled like C/C++ or Go
: shells are just programs to interact with the OS and launch other programs

## Scripting
- How do you use scripts in your work? (or personal?)
  - What problems do scripts solve?
- What languages do you develop scripts in?

: I've seen lots of scripts for deployments (Dockerfile is a script)

## TODO: Prove that bash is WRONG
```
<insert scary 10_000 line bash script here>
```
- It's not, really
- Shell scripts (can be) relatively simple (if kept small)

: Bash is very useful and has its place!
: The more I researched bash, the more I fell in love!
: If there is little looping or data structures, bash is good.
: My goal is to add another tool to your programmers tool belt.

## Downsides of shell scripting
- Complicated syntactic sugar
- Limited structure
- Lack of Libraries
- Performance
- Single threaded
- Security

: Syntax uses lots of symbols and operators that are hard to understand
: Structure - Lacks classes, interfaces, error handling
: Integrating 3rd party interactions can be hard, such as writing CLI commands with lots of flags or using curl to access APIs
: Single threaded - bash lacks basic support for multi-threading - background processes, piping and PID's are full on processes - heavier than a thread
: Security - Hard to do input sanitization

## Using golang
- High performance and scalability
- Advanced synchronization abilities (process versus thread)
- Type safety and error handling
- Libraries!

: briefly explain process versus thread
: A process is an independent program that runs in its own memory space,
: while a thread is a unit of execution within a process.

## There is a fine line - Should my script be an app?

: there are many benefits to switching to a compiled language
: better for a software developer who already works in the language

: But there is a caveat to this. When should you switch over to a deployed application?

## Golang scripts or a full fledged service/program?
Things to consider:
- One off, or occasional invocation?
- Persistent connections?
- Who needs to run this?
- How often is it changed/managed?

: Is the script just going to be run every once in a while?
: Are there any persistent connections needed?
: Do people other than developers need this run?
: Should it be a button that triggers an api in a GUI?
: If you can answer these questions, you are in luck!

: THESIS: Go's os package simplifies system-level programing while enabling the ability to use more robust programming constructs.

## Writing a script-like, system-level program in Go

## os package
- Platform-agnostic, Unix-like way of interacting with operating system
  - Portable!
- Errors handled in the "Go way"
- Most useful (for writing scripts)
  - Environment variables
  - files/directory management
  - signal handling
  - piping
  - temporary files

: Can write a script that'll work on any OS
: Simplifies system level tasks (rather than overusing the exec command)
: Can expand a script to import 3rd party libraries to accomplish advanced things.


## Get Working Directory
.play -edit examples/os_wd.go /START OMIT/,/END OMIT/
- What is the shell equivalent to this?

## Get Working Directory
.play -edit examples/os_wd.go /START OMIT/,/END OMIT/
Similar to:
```
pwd
```

## Changing Directories
.play -edit examples/os_changeDirectories.go /START OMIT/,/END OMIT/

## Changing Directories
.play -edit examples/os_changeDirectories.go /START OMIT/,/END OMIT/
Similar to:
```
cd examples
```

## Add/Remove Directories
.play -edit examples/os_directories.go /START OMIT/,/END OMIT/

: os.MkdirAll("mkdir_ex/sub_dir/parent/child", 0755)
: os.RemoveAll("mkdir_ex/sub_dir/parent/child")

## Add/Remove Directories
.play -edit examples/os_directories.go /START OMIT/,/END OMIT/
Similar to:
```
mkdir mkdir_ex
rm -r mkdir_ex # technically not correct
```

: os.MkdirAll("mkdir_ex/sub_dir/parent/child", 0755)
: os.RemoveAll("mkdir_ex/sub_dir/parent/child")

## File Operations
.play -edit examples/os_files.go /START OMIT/,/END OMIT/

For reference:
```
// Flags to OpenFile wrapping those of the underlying system. Not all
// flags may be implemented on a given system.
const (
	// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.
	O_RDONLY int = syscall.O_RDONLY // open the file read-only.
	O_WRONLY int = syscall.O_WRONLY // open the file write-only.
	O_RDWR   int = syscall.O_RDWR   // open the file read-write.
	// The remaining values may be or'ed in to control behavior.
	O_APPEND int = syscall.O_APPEND // append data to the file when writing.
	O_CREATE int = syscall.O_CREAT  // create a new file if none exists.
	O_EXCL   int = syscall.O_EXCL   // used with O_CREATE, file must not exist.
	O_SYNC   int = syscall.O_SYNC   // open for synchronous I/O.
	O_TRUNC  int = syscall.O_TRUNC  // truncate regular writable file when opened.
)
```

: os.OpenFile allows us to append

## File Operations
.play -edit examples/os_files.go /START OMIT/,/END OMIT/
Similar to:
```
touch example.txt
echo "Hello, Go! > example.txt"
cat example.txt
```

[File Functions](https://pkg.go.dev/os@go1.23.5#File)

## File operations - redirection and piping
Pipes (`|`) are for connecting two program streams together, brackets (`>`) are just meant to be written to a file.
```
ls -al | wc -l
```

## Temporary Files
.play -edit examples/os_tempFiles.go /START OMIT/,/END OMIT/
- Replaces last "*" with random string. If not defined, it will place random string at end.
- Empty directory location stores files as defined in os.TempDir()

Can you think of a shell command like this?

## Temporary Files
.play -edit examples/os_tempFiles.go /START OMIT/,/END OMIT/
Similar to:
```
mktemp -t someStuff_XXXX.txt
```

## This is bad!!
.play -edit examples/os_rootBad.go /START OMIT/,/END OMIT/
- Watch out for what input you allow a program to have.

## Root (new! go 1.24)
.play -edit examples/os_root.go /START OMIT/,/END OMIT/

: can play with "someOtherDir/../someOtherDir/hello.txt"
: prevents access to files and directories not in this root
: great consideration for security

## Permissions, Modifying Files
.play -edit examples/os_permissions.go /START OMIT/,/END OMIT/

## Permissions, Modifying Files
.play -edit examples/os_permissions.go /START OMIT/,/END OMIT/
Similar to:
```
chmod tmp 0755
```

## Environment Variables
.play -edit examples/os_envs.go /START OMIT/,/END OMIT/

## Environment Variables
.play -edit examples/os_envs.go /START OMIT/,/END OMIT/
Similar to:
```
RANDOM_ENV='Hello, world!'; echo $RANDOM_ENV
env
```

## Expand Env
.play -edit examples/os_expandEnv.go /START OMIT/,/END OMIT/

## Expand
.play -edit examples/os_expand.go /START OMIT/,/END OMIT/
- replaces ${var} or $var in the string based on the mapping function

## Processes
.play -edit examples/os_pid.go /START OMIT/,/END OMIT/

## Processes
.play -edit examples/os_pid.go /START OMIT/,/END OMIT/
```
echo $$
echo $PPID
echo $0
```

## Rewrite 'ls'
.play -edit examples/os_ls.go /START OMIT/,/END OMIT/


## os/exec

## Run versus Start
Run

.play -edit examples/os_exec_run.go /START OMIT/,/END OMIT/
Start

.play -edit examples/os_exec_start.go /START OMIT/,/END OMIT/

- Can we do the same in a shell?

## Run versus Start
Run

`./(something)`

Start

`./(something) &`

## Piping (Mario's dream)
Stdin

.play -edit examples/os_exec_stdinPipe.go /START OMIT/,/END OMIT/

## Piping (Mario's dream)
Stdin

.play -edit examples/os_exec_stdinPipe.go /START OMIT/,/END OMIT/
Similar to:
```
echo "this is being written to stdin" | cat
```

## Piping (Mario's dream)
Stdout

.play -edit examples/os_exec_stdoutPipe.go /START OMIT/,/END OMIT/

## Piping (Mario's dream)
Stdout

.play -edit examples/os_exec_stdoutPipe.go /START OMIT/,/END OMIT/
Similar to:
```
echo -n '{"Name": "Bob", "Age": 32}' | jq -r '"\(.Name) is \(.Age) years old"'
```

## File operations - redirection and piping
Stream redirection for files. This _overwrites_ files.
- `<` stdin
- `>` stdout
- `2>` stderr

Stream redirection for files. This _appends_ files.
- `<<` stdin
- `>>` stdout
- `2>>` stderr

## Example
Write to a file:
```
echo "Hello, world!" > temp.txt
```
Append to a file
```
echo "How are you?" >> temp.txt
```

: redirect to stdin (<) example: a file contains a list of inputs for a program

## os/signal

## os/signal
- Crucial for communications of non-go programs that call Go code

## Notify
.play -edit examples/os_signal_notify.go /START OMIT/,/END OMIT/

: remove os.Interrupt in order to accept all signals
: we use this in our software to provide some cleanup before the program is terminated

## os/user

## Get user info
.play -edit examples/os_user_group.go /START OMIT/,/END OMIT/

## Pitfalls
- Forgetting to close file handlers (use defer)
- Overengineering small tasks-sometimes shell scripts are better
- Not taking advantage of error handling

## Q&A
- Golang os Package - [https://pkg.go.dev/os](https://pkg.go.dev/os)
- Scripting languages vs. programming languages: What's the difference? - [phoenix.edu](https://www.phoenix.edu/blog/scripting-vs-programming-languages.html#:~:text=While%20they're%20both%20integral,programming%20develops%20the%20applications%20themselves.&text=often%20requires%20understanding%20the%20differences%20between%20these%20languages.)


: Closing thoughts - "The os package is your Swiss army knife for system-level programming in Goâ€”efficient, reliable, and cross-platform."