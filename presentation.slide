# Extensible Programming and the Golang 'os' Package
23 January 2025
// 04 February 2025

Eric Sims
Software Engineer, Vivint
e.sims@icloud.com

## packages/libraries/modules

.html images/imageLayout.html
- How is a library useful for writing a research paper?
- Is the information inside a library 100% reliable and timeless?
- How is a package useful for Amazon?
- Have all of your Amazon boxes been a perfect size?

: library - compiled information in one place - don't have to go on an archeological expedition
: library downside - relying on the observation and evidence that authors have presented. May be out of date.
: package - carrier doesn't have to worry about what is inside, easy transport
: package downside - what if the contents inside the package are fragile and the carrier fails to document that?

## packages/libraries/modules
- What is their usefulness?
- When should we make a package?
- When should we _NOT_ make a package?

## What is their usefulness?
- Code reusability
- Modularity and maintainability
- Separation of concerns
- Time savings
- Establishing standards
- Conforming to regulations (sometimes?)

: encapsulates logic
: no need to reinvent the wheel
: standards allow the company to maintain a more unified codebase
: conforming - using libraries with certain cryptographic protocols

## When to not use/make one
- Overhead for small programs (embedded devices)
- Premature modularity
- No shared or reusable logic
- Dependency management concerns
- Legal or licensing concerns

: be sure to double check that the 3rd party packages you use are kosher for use @vivint

## standard libraries
- Built-in packages
- Pre-written, commonly used packages
- Common standard libraries
  - Ways to deal with data types (strings)
  - Input/output interaction and signal processing
  - Multi-threaded programming
  - Date & time
  - Math
  - Error handling

: no need to import the package or download it from the internet
: written and managed by the languages designers
: (likely the most optimal solution)
: i/o - print statements, file management/creation,
: go's HTTP library was a little too bare bones, so used Gin/Echo. But looks better to use solely in later versions.

## standard libraries
- What are things to look for in a standard library when deciding to use a programming language?

## standard libraries
- What are things to look for in a standard library when deciding to use a programming language?
- Should the standard library be a part of our consideration process?

## Scope of standard library
- Minimalist
  - _Tends to_ have better documentation
- "Batteries included"
  - Lots of libraries, feature rich

- How would you categorize your favorite programming language?

: C, C++, Go - minimalist
: C#, Python - "batteries included"

## Other ways of comparing standard libraries
- Performance
- Portability
- Documentation

: portability - cross platform?

## Case for using standard library as much as possible

[Start with the Go Standard Library](https://matthewsanabria.dev/posts/start-with-the-go-standard-library/)

: Show the println example
: Stdlib is good if you have to think about program size (i.e. embedded)

## Golang os package

## os
- Platform-agnostic, Unix-like way of interacting with operating system
  - Portable!
- Errors handled in the "Go way"
- Most useful: Can write scripts
  - Environment variables, files/directory management, signal handling, piping, temporary files
  - Type safety and error handling - improvements over bash
  - Libraries!

: Ability to make a shell-equivalent script while simultaneously having access to other powerful libraries

## Let's play a game!
- What is the shell equivalent to the following functions in golang's `os` library?

## Get Working Directory
.play -edit examples/os_wd.go /START OMIT/,/END OMIT/

## Get Working Directory
.play -edit examples/os_wd.go /START OMIT/,/END OMIT/
Similar to:
```
pwd
```

## Changing Directories
.play -edit examples/os_changeDirectories.go /START OMIT/,/END OMIT/

## Changing Directories
.play -edit examples/os_changeDirectories.go /START OMIT/,/END OMIT/
Similar to:
```
pwd
cd examples
pwd
```

## Directory Management
.play -edit examples/os_directories.go /START OMIT/,/END OMIT/

## Directory Management
.play -edit examples/os_directories.go /START OMIT/,/END OMIT/
Similar to:
```
mkdir example_dir
rm -rf example_dir
```

## File Operations
.play -edit examples/os_files.go /START OMIT/,/END OMIT/


## File Operations
.play -edit examples/os_files.go /START OMIT/,/END OMIT/
Similar to:
```
touch example.txt
echo "Hello, Go! > example.txt"
cat example.txt` (kind of, not really)
```

## Editing a file
.play -edit examples/os_appendToFile.go /START OMIT/,/END OMIT/

: called redirection operator

## Editing a file
Stream redirection (for files)
- `<` stdin
- `>` stdout
- `2>` stderr
- Commands with double angled brackets do NOT overwrite destination's existing contents.

Write to a file:
```
echo "Hello, world!" > temp.txt
```
Append to a file
```
echo "How are you?" >> temp.txt
```

Pipes (`|`) are for connecting two program streams together, brackets (`>`) are just meant to be written to a file.

: redirect to stdin (<) example: a file contains a list of inputs for a program

## Temporary Files
.play -edit examples/os_tempFiles.go /START OMIT/,/END OMIT/
- Replaces last "*" with random string. If not defined, it will place random string at end.
- Empty directory location stores files as defined in os.TempDir()

Is there a shell command like this?

## Temporary Files
.play -edit examples/os_tempFiles.go /START OMIT/,/END OMIT/
Similar to:
```
mktemp -t someStuff_XXXX.txt
```

## Permissions, Modifying Files
.play -edit examples/os_permissions.go /START OMIT/,/END OMIT/

## Permissions, Modifying Files
.play -edit examples/os_permissions.go /START OMIT/,/END OMIT/
Similar to:
```
chmod tmp 0755
```

## Environment Variables
.play -edit examples/os_envs.go /START OMIT/,/END OMIT/

## Environment Variables
.play -edit examples/os_envs.go /START OMIT/,/END OMIT/
Similar to:
```
RANDOM_ENV='Hello, world!'; echo $RANDOM_ENV
```

## Expand Env
.play -edit examples/os_expandEnv.go /START OMIT/,/END OMIT/

## Expand
.play -edit examples/os_expand.go /START OMIT/,/END OMIT/
- replaces ${var} or $var in the string based on the mapping function

## Processes
.play -edit examples/os_pid.go /START OMIT/,/END OMIT/

## Rewrite 'ls'
.play -edit examples/os_ls.go /START OMIT/,/END OMIT/

## This is bad!!
.play -edit examples/os_rootBad.go /START OMIT/,/END OMIT/
- Watch out for what input you allow a program to have.

## Root (new! go 1.24)
.play -edit examples/os_root.go /START OMIT/,/END OMIT/

: can play with "someOtherDir/../someOtherDir/hello.txt"
: prevents access to files and directories not in this root
: great consideration for security

## os/exec

## Run versus Start
Run

.play -edit examples/os_exec_run.go /START OMIT/,/END OMIT/
Start

.play -edit examples/os_exec_start.go /START OMIT/,/END OMIT/

- Can we do the same in a shell?

## Run versus Start
Run

`./(something)`

Start

`./(something) &`

## Piping (Mario's dream)
Stdin

.play -edit examples/os_exec_stdinPipe.go /START OMIT/,/END OMIT/

## Piping (Mario's dream)
Stdin

.play -edit examples/os_exec_stdinPipe.go /START OMIT/,/END OMIT/
Similar to:
```
echo "this is being written to stdin" | cat
```

## Piping (Mario's dream)
Stdout

.play -edit examples/os_exec_stdoutPipe.go /START OMIT/,/END OMIT/

## Piping (Mario's dream)
Stdout

.play -edit examples/os_exec_stdoutPipe.go /START OMIT/,/END OMIT/
Similar to:
```
echo -n '{"Name": "Bob", "Age": 32}' | jq -r '"\(.Name) is \(.Age) years old"'
```

## os/signal

## os/signal
- Crucial for communications of non-go programs that call Go code

## Notify
.play -edit examples/os_signal_notify.go /START OMIT/,/END OMIT/

: remove os.Interrupt in order to accept all signals
: we use this in our software to provide some cleanup before the program is terminated

## os/user

## Get user info
.play -edit examples/os_user_group.go /START OMIT/,/END OMIT/
